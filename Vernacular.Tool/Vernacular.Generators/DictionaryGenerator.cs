//
// DictionaryGenerator.cs
//
// Author:
//   Stephane Delcroix <stephane@delcroix.org>
//
// Copyright 2012 S. Delcroix
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

namespace Vernacular.Generators
{
    public class DictionaryGenerator : Generator
    {
        public string Namespace { get; set; }
        public string ClassName { get; set; }

        protected override void Generate()
        {
            Writer.WriteLine (@"
//This file was autogenerated
//
using System;
using System.Collections.Generic;
using Vernacular;");

            Writer.WriteLine("namespace {0}", Namespace);
            Writer.WriteLine(@"{");
            Writer.WriteLine("public class {0} : ResourceCatalog", ClassName);
            Writer.WriteLine(@"{
        private static Dictionary<string, string> resources = new Dictionary<string, string>
        {");
            foreach (var resource_string in GetAllResourceStrings ()) {
                Writer.WriteLine("{{\"{0}\", \"{1}\"}},", resource_string.Id, resource_string.Translated);                
            }
            Writer.WriteLine (@"};

        public override Func<string, string> GetResourceById {
            get { return GetResourceByIdImplementation; }
            set { throw new InvalidOperationException (); }
        }

        private string GetResourceByIdImplementation (string id)
        {
            if (id == null) {
                return null;
            }

            string resource;
            return resources.TryGetValue (id, out resource) ? resource : null;
        }
    }
}");
        }
    }
}
